{
    "Sort_DeDuplicate_Contextualize_News": 
    "Role: You are an expert data processing agent. Your task is to meticulously filter, de-duplicate, and sort a list of news articles based on a comprehensive set of rules and keywords.\nObjective: Process the provided NEWS_LIST according to the instructions below and return a new, cleaned JSON object.\nInstructions\nYou will perform the following steps in the specified order:\n\nFilter by Keyword Consistency:\nScan each article in the NEWS_LIST.\nKeep an article only if its title contains at least one of the phrases from the provided KEYWORDS list.\nThis match must be case-insensitive.\nDiscard any article that does not meet this criterion.\nRemove Duplicate Articles:\nFrom the filtered list, identify duplicates based on the link property.\nIf multiple articles share the exact same link, keep only the first one encountered and discard all subsequent duplicates.\nSort the Final List:\nSort the remaining unique, filtered articles based on two criteria:\nA. Primary Sort (by Date): Sort articles in descending order of their publication time (newest first). You must determine the date by parsing the relative time found in each article's snippet (e.g., \"5 hours ago\", \"2 days ago\"). Assume the task is being performed on {{ $today }}.\nB. Secondary Sort (by Relevance): If two or more articles have the same publication time, sort them in descending order of their relevance score (most relevant first). The relevance score is defined as the total number of keyword groups that an article matches. An article matches a group if its title or snippet contains at least one phrase from that specific query group.\nOutput Requirements\nYour entire response must be the final JSON object and nothing else.\nDo not include any introductory text, explanations, or apologies.\nThe output's structure must exactly mirror the input NEWS_LIST format: { \"list\": [{ \"news\": [...] }] }.\nThe final article objects within the news array must not contain any added properties (such as the calculated date or relevance score).\nInput Data\nKEYWORDS\n{{ JSON.stringify($('Create Iterable list of Queries').all()) }}\nNEWS_LIST\n{{ JSON.stringify($json.news) }}\n\nOUTPUT\nThe output is a single JSON object that strictly adheres to the following structure:\n\nRoot Object: The entire output is enclosed in a single JSON object {}.\n\n\"list\" Key: The root object contains one key named \"list\". The value of this key is a JSON array [].\n\nNews Container: The \"list\" array contains a single JSON object {}.\n\n\"news\" Key: This object has one key named \"news\". The value of this key is a JSON array [] which holds the final, processed list of articles.\n\nArticle Objects: Each element inside the \"news\" array is a JSON object representing one article. Each article object contains exactly four keys, all with string values:\n\n\"title\": The article's title.\n\n\"link\": The direct URL to the article.\n\n\"displayLink\": The hostname of the article's source.\n\n\"snippet\": An excerpt from the article.\n\nHere is a template of the format:\n{\n  \"list\": [\n    {\n      \"news\": [\n        {\n          \"title\": \"String\",\n          \"link\": \"String\",\n          \"displayLink\": \"String\",\n          \"snippet\": \"String\"\n        },\n        {\n          \"title\": \"String\",\n          \"link\": \"String\",\n          \"displayLink\": \"String\",\n          \"snippet\": \"String\"\n        }\n      ]\n    }\n  ]\n}",
    "Optimize_Queries_For_Browser_Search": "Optimize the following query for a brave search, putting the context outside the parenthesis and keeping inside the parenthesis the specific portion. Put the acronyms in quotation marks as well. Just provide the new query string as the output.\n\n {{ $json.query }}",
    "Translate_Title_And_Snippets": "Output: Maintain the same input format from the RESULTS list\nTask: Translate to English the title and snippets properties.\n\nRESULTS\n {{ JSON.stringify($json.news) }}",
    "Filter_True_Articles_And_Generate_Summary": "You are an expert data processing agent. Your task is to process a JSON list of potential news articles. You will iterate through each item, visit the provided link to verify it's a news article, and then enrich the data with a summary.\n\nYour goal: To take the input LIST and produce a new, clean JSON output containing only verified news articles, each with a new summary property.\n\nInput LIST:\n {{ JSON.stringify($json.news) }}\n\nInstructions:\n\nIterate: For each object inside the news array of the input LIST.\n\nBrowse and Verify:\n\nUse your Browse tool to access the URL specified in the link property.\n\nDetermine if the URL leads to a single news article.\n\nA link should be REMOVED if it leads to a tag page (e.g., /tags/...), a category page (e.g., /politics/), an author page, or a website's homepage.\n\nProcess Valid Articles: If the link points to a single news article, perform the following:\n\nFind Publication Date: Extract the full publication date from the article. If a date cannot be found, use the string \"Publication date not specified\".\n\nSummarize Content: Write a high-quality summary of the news article in English, between 60 and 80 words.\n\nCreate Summary Property: Create a new property called summary for the current object. The value should be a single string: \"<Publication Date> - <Your 60-80 word summary>\".\n\nFinal Output:\n\nConstruct a final JSON object. This object should have one root key: \"processed_news\".\n\nThe value of \"processed_news\" should be the list of all the news article objects that you successfully processed, including their new summary property.\n\nReturn only this final, valid JSON object and nothing else."
}